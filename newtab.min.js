const showDebug = !1,
  columnsContainer = document.getElementById("columns-container"),
  addColumnButton = document.getElementById("addColumnButton"),
  editIconSVG =
    '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">\n<path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />\n</svg>\n',
  deleteIconSVG =
    '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">\n <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />\n</svg>\n',
  plusIconSVG =
    '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">\n<path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />\n</svg>';
let columnsData = [];
const stateHistory = [],
  MAX_HISTORY = 10,
  undoButton = document.getElementById("undoButton");
let defaultData;
const sortableColumns = new Sortable(columnsContainer, {
  animation: 150,
  onEnd: (e) => {
    saveState();
    const t = e.oldIndex,
      n = e.newIndex,
      o = columnsData.splice(t, 1)[0];
    columnsData.splice(n, 0, o), saveColumns();
  },
});
function initializeLinkSorting() {
  document.querySelectorAll(".links-wrapper").forEach((e, t) => {
    Sortable.create(e, {
      group: "shared-links",
      animation: 150,
      handle: ".link-item",
      draggable: ".link-item",
      onEnd: function (e) {
        saveState();
        const t = e.oldIndex,
          n = e.newIndex,
          o = Array.from(document.querySelectorAll(".links-wrapper")).indexOf(
            e.from
          ),
          l = Array.from(document.querySelectorAll(".links-wrapper")).indexOf(
            e.to
          ),
          [a] = columnsData[o].links.splice(t, 1);
        columnsData[l].links.splice(n, 0, a), saveColumns();
      },
    });
  });
}
function localizeText() {
  (document.getElementById("addBoxButtonText").textContent =
    chrome.i18n.getMessage("addBoxButtonText")),
    (document.getElementById("noneRadioText").textContent =
      chrome.i18n.getMessage("noneRadioText")),
    (document.getElementById("saveButton").textContent =
      chrome.i18n.getMessage("saveButton")),
    (document.getElementById("closeButton").textContent =
      chrome.i18n.getMessage("closeButton")),
    (document.getElementById("labelTitle").textContent =
      chrome.i18n.getMessage("labelTitle")),
    (document.getElementById("labelIcon").textContent =
      chrome.i18n.getMessage("labelIcon"));
}
function addColumn(e = "Nuova Colonna", t = [], n, o = !1) {
  const l = document.createElement("div");
  l.className = "column";
  const a = document.createElement("div");
  a.className = "column-header";
  const c = document.createElement("input");
  (c.value = e),
    (c.className = "column-title"),
    (c.onchange = () => {
      saveState(), (columnsData[n].title = c.value), saveColumns();
    }),
    c.addEventListener("keypress", (e) => {
      "Enter" === e.key && (e.preventDefault(), saveColumns(), c.blur());
    }),
    a.appendChild(c),
    o && setTimeout(() => c.focus(), 0);
  const i = document.createElement("div");
  (i.innerHTML = deleteIconSVG),
    (i.className = "delete-column-icon"),
    (i.onclick = () => {
      saveState(),
        columnsData.splice(n, 1),
        l.remove(),
        saveColumns(),
        updateAddLinkButtons();
    }),
    a.appendChild(i),
    l.appendChild(a);
  const s = document.createElement("div");
  (s.className = "links-wrapper"),
    l.appendChild(s),
    t.forEach((e) => addLink(s, e, n));
  const d = document.createElement("button");
  (d.className = "add-link"),
    (d.innerHTML = plusIconSVG + chrome.i18n.getMessage("addLinkButtonText")),
    (d.onclick = () => {
      openEditModal({ emoji: "ðŸ˜„", text: "", url: "" }, n, null, s);
    }),
    l.appendChild(d),
    columnsContainer.appendChild(l),
    (columnsData[n] = { links: t, title: e }),
    initializeLinkSorting();
}
function addLink(e, t, n) {
  const o = document.createElement("div");
  o.className = "link-item";
  let l = null;
  (l = document.createElement("a")),
    t.url
      ? ((l.href = t.url), (l.className = "link-anchor"))
      : (l.className = "link-anchor not-linked");
  const a = document.createElement("div");
  t.icon
    ? "favicon" === t.icon && t.imageUrl
      ? (a.innerHTML = `<img src="${t.imageUrl}" alt="icon" style="width: 16px; height: 16px;">`)
      : "emoji" === t.icon && (a.textContent = t.emoji)
    : (a.textContent = ""),
    (a.className = "emoji"),
    l.appendChild(a);
  const c = document.createElement("div");
  (c.textContent = t.text),
    (c.className = "link-text"),
    l.appendChild(c),
    o.appendChild(l);
  const i = document.createElement("div");
  (i.innerHTML = editIconSVG),
    (i.className = "edit-icon"),
    (i.onclick = () => {
      const l = Array.from(e.getElementsByClassName("link-item")).indexOf(o);
      openEditModal(t, n, l, e);
    }),
    o.appendChild(i);
  const s = document.createElement("div");
  (s.innerHTML = deleteIconSVG),
    (s.className = "delete-icon"),
    (s.onclick = () => {
      saveState();
      const t = Array.from(e.getElementsByClassName("link-item")).indexOf(o);
      columnsData[n].links.splice(t, 1), o.remove(), saveColumns();
    }),
    o.appendChild(s),
    e.appendChild(o);
}
function openEditModal(e, t, n, o) {
  const l = document.getElementById("editModal"),
    a = document.getElementById("url"),
    c = document.getElementById("title"),
    i = document.getElementById("faviconOption"),
    s = document.getElementById("faviconPreview"),
    d = document.getElementById("emojiOption"),
    m = document.getElementById("emptyOption"),
    u = document.getElementById("selectedEmoji"),
    r = document.getElementById("pickerContainer"),
    g = document.getElementById("emojiModal");
  showDebug && console.log("linkData in open modal", e, t, n);
  (document.querySelector(".modal-title").textContent =
    null === n
      ? chrome.i18n.getMessage("addNewLinkModalTitleText")
      : chrome.i18n.getMessage("editLinkModalTitleText")),
    (u.textContent = e.emoji);
  const p = new EmojiMart.Picker({
    onEmojiSelect: (t) => {
      (u.textContent = t.native),
        (e.emoji = t.native),
        g.classList.add("hidden");
    },
  });
  r.appendChild(p),
    d.addEventListener("click", (e) => {
      (d.checked = !0), e.stopPropagation();
    }),
    u.addEventListener("click", (e) => {
      (d.checked = !0), g.classList.remove("hidden"), e.stopPropagation();
    }),
    document.addEventListener("mousedown", (e) => {
      r.contains(e.target) || d.contains(e.target) || g.classList.add("hidden");
    }),
    (a.value = e.url || ""),
    (c.value = e.text || ""),
    (i.checked = "favicon" === e.icon),
    (d.checked = "emoji" === e.icon),
    (m.checked = !e.icon),
    (s.src = e.imageUrl
      ? e.imageUrl
      : chrome.runtime.getURL("assets/images/favicon-empty.png")),
    n || setTimeout(() => a.focus(), 0),
    a.addEventListener("change", () => {
      const t = a.value.trim();
      if (
        t &&
        (function (e) {
          try {
            return new URL(e), !0;
          } catch (e) {
            return !1;
          }
        })(t)
      ) {
        const n =
          "https://www.google.com/s2/favicons?domain=" + new URL(t).origin;
        (s.src = n), (i.checked = !0), (e.imageUrl = n);
      }
    }),
    l.classList.remove("hidden"),
    (document.onkeydown = (e) => {
      "Enter" === e.key &&
        (e.preventDefault(), document.getElementById("saveButton").click());
    }),
    (document.getElementById("saveButton").onclick = () => {
      saveState(), showDebug && console.log("on save", e, t, n);
      const l = i.checked ? "favicon" : d.checked ? "emoji" : null;
      (e.icon = l), (e.url = a.value || "#");
      const s = {
        emoji: u.textContent,
        text: c.value,
        url: e.url,
        imageUrl: e.imageUrl || null,
        icon: e.icon,
      };
      showDebug && console.log("newLinkData", s),
        null === n
          ? (columnsData[t].links.push(s), addLink(o, s, t))
          : ((columnsData[t].links[n] = s), updateLinkDisplay(o, s, n)),
        saveColumns(),
        closeEditModal();
    }),
    (document.getElementById("closeButton").onclick = closeEditModal),
    l.addEventListener("mousedown", (e) => {
      document.querySelector(".modal-content").contains(e.target) ||
        closeEditModal();
    });
}
function saveColumns() {
  chrome.storage.local.set({ columns: JSON.stringify(columnsData) }, () => {
    showDebug &&
      (console.log("Data saved successfully!"),
      console.log("columnsData", columnsData));
  });
}
function updateLinkDisplay(e, t, n) {
  showDebug && console.log("updateLinkDisplay", t, n);
  const o = e.getElementsByClassName("link-item")[n];
  t.icon
    ? "favicon" === t.icon
      ? (o.querySelector(
          ".emoji"
        ).innerHTML = `<img src="${t.imageUrl}" alt="icon" style="width: 16px; height: 16px;">`)
      : (o.querySelector(".emoji").textContent = t.emoji)
    : (o.querySelector(".emoji").textContent = ""),
    (o.querySelector(".link-text").textContent = t.text),
    (o.querySelector("a").href = t.url);
}
function closeEditModal() {
  document.getElementById("editModal").classList.add("hidden"),
    (document.onkeydown = null);
}
function updateAddLinkButtons() {
  Array.from(document.querySelectorAll(".column")).forEach((e, t) => {
    const n = e.querySelector(".add-link");
    n &&
      (n.onclick = () => {
        openEditModal(
          { emoji: "ðŸ˜„", text: "", url: "" },
          t,
          null,
          e.querySelector(".links-wrapper")
        );
      });
  });
}
function saveState() {
  stateHistory.length >= MAX_HISTORY && stateHistory.shift(),
    stateHistory.push(JSON.parse(JSON.stringify(columnsData))),
    (undoButton.disabled = !1);
}
function undo() {
  0 !== stateHistory.length
    ? ((columnsContainer.innerHTML = ""),
      (columnsData = stateHistory.pop()),
      saveColumns(),
      loadColumns(),
      (undoButton.disabled = 0 === stateHistory.length))
    : alert("Non ci sono modifiche da annullare.");
}
async function loadDefaultData() {
  try {
    const e = await fetch(
      chrome.runtime.getURL("assets/json/defaultData.json")
    );
    return await e.json();
  } catch (e) {
    return (
      console.error("Errore nel caricamento dei dati di default:", e), null
    );
  }
}
function loadColumns() {
  chrome.storage.local.get(["columns", "alreadyInstalled"], async (e) => {
    if (e.alreadyInstalled) e.columns && (columnsData = JSON.parse(e.columns));
    else
      try {
        (defaultData = await loadDefaultData()),
          showDebug && console.log("first time defaultData", defaultData),
          (columnsData = defaultData.columns),
          chrome.storage.local.set({
            columns: JSON.stringify(columnsData),
            alreadyInstalled: !0,
          });
      } catch (e) {
        console.error("Errore nel caricamento dei dati predefiniti:", e),
          (columnsData = []);
      }
    showDebug && console.log("columnsData", columnsData),
      columnsData.forEach((e, t) => {
        addColumn(e.title, e.links, t);
      }),
      initializeLinkSorting();
  });
}
document.addEventListener("DOMContentLoaded", function () {
  localizeText(), loadColumns();
}),
  addColumnButton.addEventListener("click", () => {
    addColumn("", [], columnsData.length, !0), saveColumns();
  }),
  undoButton.addEventListener("click", undo);
